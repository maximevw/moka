/*
 *  Copyright (c) 2023 Maxime Wiewiora
 *
 *  Use of this source code is governed by an MIT-style
 *  license that can be found in the LICENSE file or at
 *  https://opensource.org/licenses/MIT.
 */

package com.github.maximevw.moka.entities;

import com.github.maximevw.moka.GanacheContainer;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.methods.response.EthGetBalance;
import org.web3j.utils.Convert;

import java.io.IOException;
import java.math.BigDecimal;

/**
 * A testing account generated by Ganache.
 */
@Getter
@Builder(toBuilder = true)
@AllArgsConstructor
public class TestingAccount {

	/**
	 * The address of the account.
	 */
    private String address;

	/**
	 * The private key of the account.
	 */
    private String privateKey;

	/**
	 * The alias of the account.
	 */
    @Getter(AccessLevel.NONE)
    @Setter
    private String alias;

	/**
	 * Gets the Ganache container instance having generated this account.
	 */
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private GanacheContainer<?> ganacheInstance;

	/**
	 * The balance of the account at the last call to {@link #checkpoint()}
	 */
	@Setter(AccessLevel.NONE)
	private BigDecimal lastBalance;

	/**
	 * Gets the credentials of the account usable in Web3j methods.
	 *
	 * @return The credentials.
	 */
    public Credentials getCredentials() {
        return Credentials.create(this.privateKey);
    }

	/**
	 * Gets the alias of the account.
	 *
	 * @return The alias of the account, always prefixed with a @ sign.
	 */
    public String getAlias() {
        return "@" + this.alias;
    }

	/**
	 * Gets the current balance of the account in ETHER.
	 *
	 * @return The balance of the account in ETHER.
	 */
    public BigDecimal getBalance() {
        try {
            final EthGetBalance ethGetBalance = this.ganacheInstance.getWeb3j()
                    .ethGetBalance(this.address, DefaultBlockParameterName.LATEST).send();
            return new AccountBalance(new BigDecimal(ethGetBalance.getBalance()), Convert.Unit.ETHER).getValueInUnit();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

	/**
	 * Creates a new checkpoint of the account state.
	 */
	public void checkpoint() {
		this.lastBalance = getBalance();
	}

}
