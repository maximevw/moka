/*
 *  Copyright (c) 2023 Maxime Wiewiora
 *
 *  Use of this source code is governed by an MIT-style
 *  license that can be found in the LICENSE file or at
 *  https://opensource.org/licenses/MIT.
 */

package com.github.maximevw.moka;

import com.auth0.jwt.JWT;
import com.auth0.jwt.exceptions.JWTDecodeException;
import com.github.maximevw.moka.entities.InitAccountData;
import com.github.maximevw.moka.entities.TestingAccount;
import com.github.maximevw.moka.enums.ChainHardForkRule;
import com.github.maximevw.moka.enums.GanacheVersionLevel;
import com.github.maximevw.moka.enums.Instamine;
import com.github.maximevw.moka.enums.Network;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.containers.wait.strategy.HostPortWaitStrategy;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.http.HttpService;
import org.web3j.utils.Convert;

import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.stream.Collectors;

import static com.github.maximevw.moka.enums.GanacheVersionLevel.V6;
import static com.github.maximevw.moka.enums.GanacheVersionLevel.V7;
import static org.web3j.crypto.WalletUtils.isValidAddress;
import static org.web3j.utils.Numeric.containsHexPrefix;

/**
 * A Ganache container for testing of applications using Web3j.
 */
@Slf4j(topic = "GanacheContainer")
public class GanacheContainer<SELF extends GanacheContainer<SELF>> extends GenericContainer<SELF> {

	/**
	 * The default Ganache image.
	 * <p>
	 *     Since version 7, use {@code trufflesuite/ganache}. For prior versions, use {@code trufflesuite/ganache-cli}.
	 * </p>
	 */
	public static final String DEFAULT_IMAGE = "trufflesuite/ganache";
	/**
	 * The default image version (latest).
	 */
	public static final String LATEST_VERSION = "latest";

	private static final int STARTUP_TIMEOUT_IN_SECONDS = 30;
	private static final int DEFAULT_PORT = 8545;
	private static final String COMMA = ",";
	private static final String HTTP_HEADER_REGEX =
		"^[a-zA-Z0-9\\-_]*: ?[a-zA-Z0-9_ :;.,/\"'?!(){}\\[\\]@<>=\\-+*#$&`|~^%]*$";

	/**
	 * The testing accounts generated by the Ganache instance.
	 */
	@Getter
	private final Map<Integer, TestingAccount> testingAccounts = new HashMap<>();

	private Web3j web3j;
	private int ganachePort = DEFAULT_PORT;
	private final GanacheVersionLevel ganacheVersionLevel;
	private final List<String> ganacheOptions = new ArrayList<>();
	private final List<String> accountsAliases = new ArrayList<>();

	// ==========================================
	// Container initialization and configuration
	// ==========================================

	/**
	 * Constructor.
	 * <p>
	 *     Creates a Ganache container using the default image ({@value #DEFAULT_IMAGE}) and version
	 *	   ({@value #LATEST_VERSION}).
	 * </p>
	 */
	public GanacheContainer() {
		this(LATEST_VERSION);
	}

	/**
	 * Constructor.
	 * <p>
	 *     Creates a Ganache container using the default image ({@value #DEFAULT_IMAGE}) and the specified version.
	 * </p>
	 *
	 * @param version The image version.
	 */
	public GanacheContainer(final String version) {
		this(DEFAULT_IMAGE, version);
	}

	/**
	 * Constructor.
	 * <p>
	 *     Creates a Ganache container using the specified image and version.
	 * </p>
	 *
	 * @param imageName The image name.
	 * @param version   The image version.
	 */
	public GanacheContainer(final String imageName, final String version) {
		super(imageName + ":" + version);
		this.ganacheVersionLevel = GanacheVersionLevel.fromImageName(imageName);
	}

	/**
	 * Waits until Ganache is started.
	 */
	public void waitUntilGanacheIsReady() {
		this.getWaitStrategy().waitUntilReady(this);
	}

	/**
	 * The provided aliases will be assigned, in the given order, to the accounts created by Ganache.
	 * <p>
	 *     If the number of aliases is less than the number of instantiated accounts, only the N-th first accounts
	 *	   will have an alias (if N aliases have been provided).
	 * </p>
	 *
	 * @param aliases The list of accounts aliases.
	 */
	public void withAccountsAliases(final List<String> aliases) {
		this.accountsAliases.addAll(aliases);
	}

	@Override
	protected void configure() {
		withExposedPorts(this.ganachePort);
		withLogConsumer(new GanacheLogConsumer(this));
		if (this.ganacheOptions.size() > 0) {
			withCommand(String.join(StringUtils.SPACE, ganacheOptions));
			log.debug("Options passed to Ganache CLI: " + String.join(StringUtils.SPACE, this.getCommandParts()));
		}
		this.waitStrategy = new HostPortWaitStrategy()
			.withStartupTimeout(Duration.ofSeconds(STARTUP_TIMEOUT_IN_SECONDS));
	}

	/**
	 * Maps an account address generated by Ganache to a {@link TestingAccount} instance.
	 *
	 * @param index 	The index of the account generated by Ganache.
	 * @param address 	The address.
	 */
	void mapGanacheAccount(final int index, final String address) {
		mapGanacheTestingAccount(index, address, null);
	}

	/**
	 * Maps an account private key generated by Ganache to a {@link TestingAccount} instance.
	 *
	 * @param index 	 	The index of the account generated by Ganache.
	 * @param privateKey	The private key.
	 */
	void mapGanachePrivateKey(final int index, final String privateKey) {
		mapGanacheTestingAccount(index, null, privateKey);
	}

	private void mapGanacheTestingAccount(final int index, final String address, final String privateKey) {
		final TestingAccount alreadyMappedAccount = this.testingAccounts.get(index);
		if (alreadyMappedAccount != null) {
			this.testingAccounts.put(index,
				alreadyMappedAccount.toBuilder()
					.address(StringUtils.defaultString(address, alreadyMappedAccount.getAddress()))
					.privateKey(StringUtils.defaultString(privateKey, alreadyMappedAccount.getPrivateKey()))
					.build());
		} else {
			String alias = null;
			if (index < this.accountsAliases.size()) {
				alias = this.accountsAliases.get(index);
			}
			final TestingAccount account = TestingAccount.builder()
				.ganacheInstance(this)
				.address(address)
				.privateKey(privateKey)
				.alias(alias)
				.build();
			this.testingAccounts.put(index, account);
		}
	}

	// ============================
	// Services provided by Ganache
	// ============================

	/**
	 * Picks a random testing account among those generated by Ganache.
	 *
	 * @return a testing account.
	 */
	public TestingAccount pickRandomTestingAccount() {
		return this.testingAccounts.get(new Random().nextInt(this.testingAccounts.size()));
	}

	/**
	 * Gets the testing account generated by Ganache with the specified index.
	 *
	 * @param index The index of the testing account.
	 * @return a testing account.
	 */
	public TestingAccount getTestingAccount(final int index) {
		return this.testingAccounts.get(index);
	}

	/**
	 * Gets the testing account generated by Ganache with the specified alias.
	 *
	 * @param alias The alias of the testing account.
	 * @return a testing account.
	 */
	public TestingAccount getTestingAccount(final String alias) {
		return this.testingAccounts.values().stream()
				.filter(testingAccount -> alias.equals(testingAccount.getAlias()))
				.findFirst()
				.orElseThrow();
	}

	/**
	 * Gets a {@link Web3j} instance using the Ganache container as node provider.
	 *
	 * @return a Web3j instance.
	 * @throws IllegalStateException when the Web3j service cannot be instantiated.
	 */
	public Web3j getWeb3j() {
		if (this.web3j == null) {
			try {
				final String nodeUri = String.format("http://%s:%d/", getHost(), getMappedPort(8545));
				this.web3j = Web3j.build(new HttpService(nodeUri));
				log.info("Starting Web3j service with net version: {}", this.web3j.netVersion().send().getNetVersion());
			} catch (final Exception ex) {
				throw new IllegalStateException("Unable to get Web3j instance.", ex);
			}
		}
		return this.web3j;
	}

	// ===============
	// Ganache options
	// ===============
	// Note: to be compatible with Ganache CLI versions prior to version 7, we systematically use non-deprecated
	// options also available in the previous versions. When it's not sufficient to ensure the compatibility, we use
	// GanacheOption object allowing to define different options depending on the target version.
	// See Ganache CLI documentation here: https://trufflesuite.com/docs/ganache/reference/cli-options/

	private void checkCompatibility(final int minimalVersion) {
		if (minimalVersion > this.ganacheVersionLevel.getMajorVersion()) {
			throw new RuntimeException("This option is not allowed with the used Ganache version level ("
					+ this.ganacheVersionLevel.name() + ").");
		}
	}

	// Server options
	// --------------

	/**
	 * The port to listen on.
	 * <p>
	 *     This is used as a port exposed by the container.<br>
	 *	   Ganache CLI option: {@code -p} or {@code --server.port} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>8545</i>
	 * </p>
	 *
	 * @param port The port number.
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#server">Ganache CLI server options</a>
	 */
	public SELF withPort(final int port) {
		this.ganachePort = port;
		this.ganacheOptions.add("-p ".concat(String.valueOf(port)));
		return self();
	}

	/**
	 * The endpoint route the HTTP and WebSocket servers will listen on.
	 * <p>
	 *     Ganache CLI option: {@code --server.rpcEndpoint}<br>
	 *	   Minimal required Ganache version: 7.0.0<br>
	 *	   Default value: <i>"/" (Ethereum) or "/rpc/v0" (Filecoin)</i>
	 * </p>
	 *
	 * @param rpcEndpoint The RPC endpoint to use.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified endpoint is blank.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#server">Ganache CLI server options</a>
	 */
	public SELF withRpcEndpoint(final String rpcEndpoint) {
		checkCompatibility(V7.getMajorVersion());
		if (StringUtils.isBlank(rpcEndpoint)) {
			throw new IllegalArgumentException("The RPC endpoint cannot be blank.");
		}
		this.ganacheOptions.add("--server.rpcEndpoint ".concat(rpcEndpoint));
		return self();
	}

	/**
	 * The approximate size of each chunk when Ganache responds with chunked transfer-encoding over HTTP and fragmented
	 * send over WebSockets.
	 * <p>
	 *     Ganache CLI option: {@code --server.chunkSize}<br>
	 *	   Minimal required Ganache version: 7.3.0<br>
	 *	   Default value: <i>1048576 bytes</i>
	 * </p>
	 *
	 * @param chunkSize The chunk size in bytes.
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#server">Ganache CLI server options</a>
	 */
	public SELF withServerChunkSize(final long chunkSize) {
		checkCompatibility(V7.getMajorVersion());
		log.warn("The option '--server.chunkSize' will be ignored if you run a Ganache version prior to 7.3.0.");
		this.ganacheOptions.add("--server.chunkSize ".concat(String.valueOf(chunkSize)));
		return self();
	}

	// Logging options
	// ---------------

	/**
	 * Whether the EVM opcodes must be logged.
	 * <p>
	 *     Ganache CLI option: {@code --debug} (prior to v7) or {@code --logging.debug} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>false</i>
	 * </p>
	 *
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#logging">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withEvmDebug() {
		final GanacheOption evmDebugOption = new GanacheOption()
				.addOption(V6, "--debug")
				.addOption(V7, "--logging.debug");
		this.ganacheOptions.add(evmDebugOption.getOptionNameForVersion(this.ganacheVersionLevel));
		return self();
	}

	/**
	 * Whether the logging is disabled.
	 * <p>
	 *     Ganache CLI option: {@code -q} or {@code --logging.quiet} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>false</i>
	 * </p>
	 *
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#logging">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withLoggingDisabled() {
		this.ganacheOptions.add("-q");
		return self();
	}

	/**
	 * Whether the verbose logging for RPC requests is enabled.
	 * <p>
	 *     Ganache CLI option: {@code -v} or {@code --logging.verbose} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>false</i>
	 * </p>
	 *
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#logging">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withVerboseLogging() {
		this.ganacheOptions.add("-v");
		return self();
	}

	// Wallet options
	// --------------

	/**
	 * The account data to initialize including for each account:
	 * <ul>
	 *     <li>a private key (64 characters long hexadecimal string prefixed by 0x)</li>
	 *     <li>an initial balance (in WEI)</li>
	 * </ul>
	 * <p>
	 *     Ganache CLI option: {@code --account} (prior to v7) or {@code --wallet.accounts} (since v7)<br>
	 *     Minimal required Ganache version: 6<br>
	 *	   Default value: <i>none</i>
	 * </p>
	 *
	 * @param accounts The list of accounts.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified list of accounts is {@code null}.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#wallet">
	 *	 Ganache CLI logging options</a>
	 * @see InitAccountData
	 */
	public SELF withAccounts(final List<InitAccountData> accounts) {
		if (accounts == null) {
			throw new IllegalArgumentException("The list of initial accounts data cannot be null.");
		}
		final GanacheOption accountsOptions = new GanacheOption()
				.addOption(V6, "--account ")
				.addOption(V7, "--wallet.accounts ");
		final List<String> accountsData = accounts.stream()
				.map(account -> String.format("%s,%s", account.getPrivateKey(), account.getBalanceInWei()))
				.collect(Collectors.toList());
		accountsData.forEach(accountData ->
				this.ganacheOptions.add(accountsOptions.getOptionNameForVersion(this.ganacheVersionLevel)
						.concat(accountData)));
		return self();
	}

	/**
	 * The number of accounts to generate at startup.
	 * <p>
	 *     Ganache CLI option: {@code -a} or {@code --wallet.totalAccounts} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>10</i>
	 * </p>
	 *
	 * @param accountsNumber The number of accounts.
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#wallet">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withNumberAccounts(final int accountsNumber) {
		this.ganacheOptions.add("-a ".concat(String.valueOf(accountsNumber)));
		return self();
	}

	/**
	 * The seed to use to generate a mnemonic.
	 * <p>
	 *     Using this option will automatically add the option {@code -d} (or {@code --wallet.deterministic} since v7)
	 *	   in order to use the defined seed.<br>
	 *	   Ganache CLI option: {@code -s} or {@code --wallet.seed} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>random value when the deterministic option is not specified</i>
	 * </p>
	 *
	 * @param seed The seed value.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified seed value is blank.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#wallet">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withDeterministicSeed(final String seed) {
		if (StringUtils.isBlank(seed)) {
			throw new IllegalArgumentException("The seed value cannot be blank.");
		}
		this.ganacheOptions.add("-d -s ".concat(seed));
		return self();
	}

	/**
	 * The specific HD wallet mnemonic to use to generate initial addresses.
	 * <p>
	 *     Ganache CLI option: {@code -m} or {@code --wallet.mnemonic} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>generated from seed value</i>
	 * </p>
	 *
	 * @param mnemonic The mnemonic value.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified mnemonic value is blank.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#wallet">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withMnemonic(final String mnemonic) {
		if (StringUtils.isBlank(mnemonic)) {
			throw new IllegalArgumentException("The mnemonic value cannot be blank.");
		}
		this.ganacheOptions.add("-m ".concat(mnemonic));
		return self();
	}

	/**
	 * The addresses or address indexes specifying which accounts should be unlocked.
	 * <p>
	 *     Ganache CLI option: {@code -u} or {@code --wallet.unlockedAccounts} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>none</i>
	 * </p>
	 *
	 * @param unlockedAccounts The addresses or address indexes.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified set of accounts addresses is {@code null}.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#wallet">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withUnlockedAccounts(final Set<String> unlockedAccounts) {
		if (unlockedAccounts == null) {
			throw new IllegalArgumentException("The provided accounts addresses cannot be null.");
		}
		final List<String> unlockedAddresses = unlockedAccounts.stream()
				.filter(StringUtils::isNotBlank)
				.collect(Collectors.toList());
		this.ganacheOptions.add("-u ".concat(String.join(COMMA, unlockedAddresses)));
		return self();
	}

	/**
	 * The available accounts are locked by default (useful for third party transaction signing).
	 * <p>
	 *     Ganache CLI option: {@code -n} or {@code --wallet.lock} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>false</i>
	 * </p>
	 *
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#wallet">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withAvailableAccountsLocked() {
		this.ganacheOptions.add("-n");
		return self();
	}

	/**
	 * The passphrase to use when locking accounts.
	 * <p>
	 *     Ganache CLI option: {@code --wallet.passphrase}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>none</i>
	 * </p>
	 *
	 * @param passphrase The passphrase used to lock accounts.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified passphrase is blank.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#wallet">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withLockingPassphrase(final String passphrase) {
		checkCompatibility(V7.getMajorVersion());
		if (StringUtils.isBlank(passphrase)) {
			throw new IllegalArgumentException("The locking passphrase cannot be blank.");
		}
		this.ganacheOptions.add("--wallet.passphrase ".concat(passphrase));
		return self();
	}

	/**
	 * The default account balance.
	 * <p>
	 *     Ganache CLI option: {@code -e} or {@code --wallet.defaultBalance} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>100 ETH (prior to v7) or 1000 ETH (since v7)</i>
	 * </p>
	 *
	 * @param value The default account balance in the specified unit.
	 * @param unit The unit.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified balance value and/or unit is {@code null}.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#wallet">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withDefaultBalance(final BigDecimal value, final Convert.Unit unit) {
		if (value == null || unit == null) {
			throw new IllegalArgumentException("The default balance cannot be null.");
		}
		BigDecimal defaultBalanceInEther = value;
		if (unit != Convert.Unit.ETHER) {
			defaultBalanceInEther = Convert.fromWei(Convert.toWei(value, unit), Convert.Unit.ETHER);
		}
		this.ganacheOptions.add("-e ".concat(defaultBalanceInEther.toString()));
		return self();
	}

	/**
	 * The hierarchical deterministic path to use when generating accounts.
	 * <p>
	 *     Ganache CLI option: {@code --hdPath} (prior to V7) or {@code --wallet.hdPath} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>m,44',60',0',0</i>
	 * </p>
	 *
	 * @param hdPath The hierarchical deterministic path to use.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified HD path is blank.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#wallet">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withWalletHdPath(final String hdPath) {
		if (StringUtils.isBlank(hdPath)) {
			throw new IllegalArgumentException("The hierarchical deterministic path cannot be blank.");
		}
		final GanacheOption hdPathOptions = new GanacheOption()
				.addOption(V6, "--hdPath ")
				.addOption(V7, "--wallet.hdPath ");
		this.ganacheOptions.add(hdPathOptions.getOptionNameForVersion(this.ganacheVersionLevel).concat(hdPath));
		return self();
	}

	// Chain options
	// -------------

	/**
	 * Whether unlimited contract sizes are allowed while debugging. Setting this to {@code true} will cause
	 * Ganache to behave differently than real production environments.
	 * <p>
	 *     Ganache CLI option: {@code --allowUnlimitedContractSize} (prior to V7) or
	 *	   {@code --chain.allowUnlimitedContractSize} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>false</i>
	 * </p>
	 *
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#chain">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withUnlimitedContractSizeAllowed() {
		final GanacheOption unlimitedContractSizeOptions = new GanacheOption()
				.addOption(V6, "--allowUnlimitedContractSize")
				.addOption(V7, "--chain.allowUnlimitedContractSize");
		this.ganacheOptions.add(unlimitedContractSizeOptions.getOptionNameForVersion(this.ganacheVersionLevel));
		return self();
	}

	/**
	 * When set to {@code false}, only one request will be processed at a time.
	 * <p>
	 *     Ganache CLI option: {@code --chain.asyncRequestProcessing}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>true</i>
	 * </p>
	 *
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#chain">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withAsyncRequestProcessing() {
		checkCompatibility(V7.getMajorVersion());
		this.ganacheOptions.add("--chain.asyncRequestProcessing");
		return self();
	}

	/**
	 * The currently configured chain id.
	 * <p>
	 *     Ganache CLI option: {@code --chainId} (prior to V7) or {@code --chain.chainId} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>1337</i>
	 * </p>
	 *
	 * @param chainId The chain ID.
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#chain">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withChainId(final int chainId) {
		final GanacheOption chainIdOptions = new GanacheOption()
				.addOption(V6, "--chainId ")
				.addOption(V7, "--chain.chainId ");
		this.ganacheOptions.add(chainIdOptions.getOptionNameForVersion(this.ganacheVersionLevel)
				.concat(String.valueOf(chainId)));
		return self();
	}

	/**
	 * The id of the network returned by the RPC method {@code net_version}.
	 * <p>
	 *     Ganache CLI option: {@code -i} or {@code --chain.networkId} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>System time at process start or the network ID of the forked blockchain if configured.</i>
	 * </p>
	 *
	 * @param networkId The network ID.
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#chain">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withNetworkId(final int networkId) {
		this.ganacheOptions.add("-i ".concat(String.valueOf(networkId)));
		return self();
	}

	/**
	 * The date that the first block should start.
	 * <p>
	 *     Ganache CLI option: {@code -t} or {@code --chain.time} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>none</i>
	 * </p>
	 *
	 * @param time The datetime to use.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified chain time is {@code null}.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#chain">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withChainTime(final OffsetDateTime time) {
		if (time == null) {
			throw new IllegalArgumentException("The chain time cannot be null.");
		}
		this.ganacheOptions.add("-t ".concat(DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(time.toZonedDateTime())));
		return self();
	}

	/**
	 * The hardfork rules for the EVM.
	 * <p>
	 *     Be careful, the hardfork rules may vary with the Ganache version used.<br>
	 *	   Ganache CLI option: {@code -k} or {@code --chain.hardfork} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>{@link ChainHardForkRule#MERGE}</i>
	 * </p>
	 *
	 * @param hardfork The hardfork rules to use.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified hardfork rule is {@code null} or is not supported by the
	 * 									used Ganache version.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#chain">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withHardfork(final ChainHardForkRule hardfork) {
		if (hardfork == null) {
			throw new IllegalArgumentException("The hardfork rule cannot be null.");
		} else if (!hardfork.supports(this.ganacheVersionLevel)) {
			throw new IllegalArgumentException("The specified hardfork rule cannot be used with this Ganache version.");
		}
		this.ganacheOptions.add("-k ".concat(hardfork.getRuleName()));
		return self();
	}

	/**
	 * Whether to report runtime errors from EVM code as RPC errors.
	 * <p>
	 *     Ganache CLI option: {@code --noVMErrorsOnRPCResponse} (prior to v7) or {@code --chain.vmErrorsOnRPCResponse}
	 *	   (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>false</i>
	 * </p>
	 *
	 * @param reportEvmErrors {@code true} if the runtime errors from EVM code should be reported as RPC errors,
	 * 						  {@code false} otherwise.
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#chain">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withVmErrorsOnRPCResponse(final boolean reportEvmErrors) {
		final GanacheOption reportEvmErrorsOptions = new GanacheOption();
		if (reportEvmErrors) {
			reportEvmErrorsOptions.addOption(V6, StringUtils.EMPTY).addOption(V7, "--chain.vmErrorsOnRPCResponse");
		} else {
			reportEvmErrorsOptions.addOption(V6, "--noVMErrorsOnRPCResponse").addOption(V7, StringUtils.EMPTY);
		}
		this.ganacheOptions.add(reportEvmErrorsOptions.getOptionNameForVersion(this.ganacheVersionLevel));
		return self();
	}

	// Miner options
	// -------------

	/**
	 * The block time in seconds for automatic mining. A block time of 0 enables the "instamine mode", where new
	 * executable transactions will be mined instantly.
	 * <p>
	 *     Ganache CLI option: {@code -b} or {@code --miner.blockTime} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>0</i>
	 * </p>
	 *
	 * @param blockTime The block time in seconds.
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#miner">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withBlockTime(final int blockTime) {
		this.ganacheOptions.add("-b ".concat(String.valueOf(blockTime)));
		return self();
	}

	/**
	 * The amount of time in seconds, to add to the timestamp of each new block header. By default, the value is
	 * {@code clock}, which uses your system clock time as the timestamp for each block.
	 * <p>
	 *     Ganache CLI option: {@code --miner.timestampIncrement} (since v7)<br>
	 *	   Minimal required Ganache version: 7.3.0<br>
	 *	   Default value: <i>clock</i>
	 * </p>
	 *
	 * @param increment The timestamp increment in seconds.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified timestamp increment is blank, not an integer value or
	 * 									'clock'.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#miner">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withTimestampIncrement(final String increment) {
		checkCompatibility(V7.getMajorVersion());
		log.warn("The option '--miner.timestampIncrement' will be ignored if you run a Ganache version prior "
				+ "to 7.3.0.");
		if (StringUtils.isBlank(increment)) {
			throw new IllegalArgumentException("The timestamp increment cannot be blank.");
		} else if (!"clock".equals(increment) && !StringUtils.isNumeric(increment)) {
			throw new IllegalArgumentException("The timestamp increment must an integer value or 'clock'.");
		}
		this.ganacheOptions.add("--miner.timestampIncrement ".concat(increment));
		return self();
	}

	/**
	 * The default gas price in WEI for transactions if not otherwise specified.
	 * <p>
	 *     Ganache CLI option: {@code -g} or {@code --miner.timestampIncrement} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>20000000000 WEI prior to v7, 0x77359400 (2000000000 WEI) since v7</i>
	 * </p>
	 *
	 * @param gasPrice The price in WEI.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified gas price is blank or not a number (if Ganache version level
	 * 									is {@link GanacheVersionLevel#V6}).
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#miner">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withDefaultGasPrice(final String gasPrice) {
		if (StringUtils.isBlank(gasPrice)) {
			throw new IllegalArgumentException("The default gas price cannot be blank.");
		} else if (this.ganacheVersionLevel == V6 && !StringUtils.isNumeric(gasPrice)) {
			throw new IllegalArgumentException("The default gas price must be a number.");
		}
		this.ganacheOptions.add("-g ".concat(gasPrice));
		return self();
	}

	/**
	 * The block gas limit in WEI.
	 * <p>
	 *     Ganache CLI option: {@code -l} or {@code --miner.blockGasLimit} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>6721975 WEI prior to V7, 0x1c9c380 (30000000 WEI) since v7</i>
	 * </p>
	 *
	 * @param gasLimit The gas limit in WEI.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified gas limit is blank or not a number (if Ganache version level
	 * 									is {@link GanacheVersionLevel#V6}).
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#miner">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withBlockGasLimit(final String gasLimit) {
		if (StringUtils.isBlank(gasLimit)) {
			throw new IllegalArgumentException("The block gas limit cannot be blank.");
		} else if (this.ganacheVersionLevel == V6 && !StringUtils.isNumeric(gasLimit)) {
			throw new IllegalArgumentException("The block gas limit must be a number.");
		}
		this.ganacheOptions.add("-l ".concat(gasLimit));
		return self();
	}

	/**
	 * The default transaction gas limit in WEI. Set to {@code estimate} to use an estimate limit (slows down
	 * the transaction execution by at least 40%).
	 * <p>
	 *     Ganache CLI option: {@code --miner.defaultTransactionGasLimit}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>0x15f90 (90000 WEI)</i>
	 * </p>
	 *
	 * @param transactionGasLimit The transaction gas limit in WEI.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified gas limit is blank or not a hexadecimal value or 'estimate'.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#miner">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withDefaultTransactionGasLimit(final String transactionGasLimit) {
		checkCompatibility(V7.getMajorVersion());
		if (StringUtils.isBlank(transactionGasLimit)) {
			throw new IllegalArgumentException("The transaction gas limit cannot be blank.");
		} else if (!"estimate".equals(transactionGasLimit) && !containsHexPrefix(transactionGasLimit)) {
			throw new IllegalArgumentException("The transaction gas limit must be a hexadecimal value or 'estimate'.");
		}
		this.ganacheOptions.add("--miner.defaultTransactionGasLimit ".concat(transactionGasLimit));
		return self();
	}

	/**
	 * The block difficulty. Value is always 0 after the merge hardfork.
	 * <p>
	 *     Ganache CLI option: {@code --miner.difficulty}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>0x1</i>
	 * </p>
	 *
	 * @param difficulty The block difficulty.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified difficulty is blank or not a hexadecimal value.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#miner">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withDifficulty(final String difficulty) {
		checkCompatibility(V7.getMajorVersion());
		if (StringUtils.isBlank(difficulty)) {
			throw new IllegalArgumentException("The difficulty cannot be blank.");
		} else if (!containsHexPrefix(difficulty)) {
			throw new IllegalArgumentException("The difficulty must be a hexadecimal value.");
		}
		this.ganacheOptions.add("--miner.difficulty ".concat(difficulty));
		return self();
	}

	/**
	 * The transaction gas limit in WEI for {@code eth_call} and {@code eth_estimateGas} calls.
	 * <p>
	 *     Ganache CLI option: {@code --callGasLimit} (prior to v7) or {@code --miner.difficulty} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>9007199254740991 WEI prior to v7, 0x2faf080 (50000000 WEI) since v7</i>
	 * </p>
	 *
	 * @param gasLimit The block difficulty.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified gas limit is blank or not a hexadecimal value.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#miner">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withCallGasLimit(final String gasLimit) {
		if (StringUtils.isBlank(gasLimit)) {
			throw new IllegalArgumentException("The call gas limit cannot be blank.");
		} else if (!containsHexPrefix(gasLimit)) {
			throw new IllegalArgumentException("The call gas limit must be a hexadecimal value.");
		}
		final GanacheOption callGasLimitOptions = new GanacheOption()
				.addOption(V6, "--callGasLimit ")
				.addOption(V7, "--miner.callGasLimit ");
		this.ganacheOptions.add(callGasLimitOptions.getOptionNameForVersion(this.ganacheVersionLevel).concat(gasLimit));
		return self();
	}

	/**
	 * The instamine mode.
	 * <ul>
	 *     <li>In {@link Instamine#EAGER} mode, a transaction will be included in a block before its hash is returned
	 *	   to the caller.</li>
	 *	   <li>In {@link Instamine#STRICT} mode, a transaction's hash is returned to the caller before the transaction
	 *	   is included in a block.</li>
	 * </ul>
	 * It has no effect if the block time is not 0 (the value by default).
	 * <p>
	 *     Ganache CLI option: {@code --miner.instamine}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>{@link Instamine#EAGER}</i>
	 * </p>
	 *
	 * @param instamine The instamine mode.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified instamine mode is {@code null}.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#miner">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withInstamine(final Instamine instamine) {
		checkCompatibility(V7.getMajorVersion());
		if (instamine == null) {
			throw new IllegalArgumentException("The instamine mode cannot be null.");
		}
		this.ganacheOptions.add("--miner.instamine ".concat(instamine.getModeName()));
		return self();
	}

	/**
	 * The address where mining rewards will go.
	 * <p>
	 *     Ganache CLI option: {@code --miner.coinbase}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>0x0000000000000000000000000000000000000000</i>
	 * </p>
	 *
	 * @param address The address.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified coinbase address is blank or invalid.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#miner">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withCoinbaseAddress(final String address) {
		checkCompatibility(V7.getMajorVersion());
		if (StringUtils.isBlank(address)) {
			throw new IllegalArgumentException("The coinbase address cannot be blank.");
		} else if (!isValidAddress(address)) {
			throw new IllegalArgumentException("The coinbase address must be a valid address.");
		}
		this.ganacheOptions.add("--miner.coinbase ".concat(address));
		return self();
	}

	/**
	 * The extra data block header field a miner can include.
	 * <p>
	 *     Ganache CLI option: {@code --miner.extraData}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>0x</i>
	 * </p>
	 *
	 * @param extraData The extra data to include.
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#miner">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withMinerExtraData(final String extraData) {
		checkCompatibility(V7.getMajorVersion());
		this.ganacheOptions.add("--miner.extraData ".concat(extraData));
		return self();
	}

	/**
	 * The minimum price bump percentage needed to replace a transaction that already exists in the transaction pool.
	 * <p>
	 *     Ganache CLI option: {@code --miner.priceBump}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>10</i>
	 * </p>
	 *
	 * @param percentage The percentage.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified percentage is not a numeric value.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#miner">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withMinimumPriceBump(final String percentage) {
		checkCompatibility(V7.getMajorVersion());
		if (!StringUtils.isNumeric(percentage)) {
			throw new IllegalArgumentException("The minimum price bump must be a numeric value (percentage).");
		}
		this.ganacheOptions.add("--miner.priceBump ".concat(percentage));
		return self();
	}

	// Fork options
	// -------------

	/**
	 * The URL used to fork from another currently running Ethereum client at a given block. The input should be the
	 * URL of the node, e.g. {@code http://localhost:1337}. You can optionally specify the block to fork from using an @
	 * sign, for example: {@code http://localhost:1337@8675309}.
	 * <p>
	 *     You can specify Basic Authentication credentials in the URL as well. e.g.,
	 *	   {@code wss://user:password@example.com/}. If you need to use an Infura Project Secret, you would use it like
	 *	   this: {@code wss://:<YOUR-PROJECT-SECRET>@mainnet.infura.com/...}. Alternatively, you can use the
	 *	   {@link #withForkUsername(String)} and {@link #withForkPassword(String)} options.
	 * </p>
	 * <p>
	 *     Ganache CLI option: {@code -f} or {@code --fork.url} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>none</i>
	 * </p>
	 *
	 * @param url The fork URL.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified URL is invalid.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#fork">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withForkUrl(final String url) {
		try {
			new URL(url).toURI();
		} catch (final MalformedURLException | URISyntaxException ex) {
			throw new IllegalArgumentException("The URL is invalid.");
		}
		this.ganacheOptions.add("-f ".concat(url));
		return self();
	}

	/**
	 * The network name to fork from. It uses Infura's archive nodes.
	 * <p>
	 *     Ganache CLI option: {@code --fork.network}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>none</i>
	 * </p>
	 *
	 * @param network The network to fork from.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified network is {@code null}.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#fork">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withForkNetwork(final Network network) {
		checkCompatibility(V7.getMajorVersion());
		if (network == null) {
			throw new IllegalArgumentException("The fork network cannot be null.");
		}
		this.ganacheOptions.add("--fork.network ".concat(network.getNetworkName()));
		return self();
	}

	/**
	 * The block number the provider should fork from.
	 * <p>
	 *     Ganache CLI option: {@code --fork.blockNumber}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>{@link DefaultBlockParameterName#LATEST}</i>
	 * </p>
	 *
	 * @param blockNumber The network to fork from.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified block number is {@code null}.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#fork">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withForkBlockNumber(final DefaultBlockParameter blockNumber) {
		checkCompatibility(V7.getMajorVersion());
		if (blockNumber == null) {
			throw new IllegalArgumentException("The fork block number cannot be null.");
		}
		this.ganacheOptions.add("--fork.blockNumber ".concat(blockNumber.getValue()));
		return self();
	}

	/**
	 * The number of blocks before the remote node's "latest" block to fork from; when the fork block number
	 * ({@link #withForkBlockNumber(DefaultBlockParameter)}) is set to {@link DefaultBlockParameterName#LATEST}.
	 * <p>
	 *     Ganache CLI option: {@code --fork.preLatestConfirmations}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>5</i>
	 * </p>
	 *
	 * @param numberOfBlocks The network to fork from.
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#fork">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withForkPreLatestConfirmations(final int numberOfBlocks) {
		checkCompatibility(V7.getMajorVersion());
		this.ganacheOptions.add("--fork.preLatestConfirmations ".concat(String.valueOf(numberOfBlocks)));
		return self();
	}

	/**
	 * The username to use for Basic Authentication. It does not require setting {@link #withForkPassword(String)}.
	 * <p>
	 *     When combined with the option {@link #withForkPassword(String)}, it is shorthand for fork:
	 *	   <pre>
	 *		 { headers:
	 *		   { "Authorization": "Basic &lt;ENCODED-BASIC-HEADER&gt;" }
	 *		 }
	 *	   </pre>
	 *	   If the {@link #withForkHeaders(String[])} option specifies an {@code Authorization} header, it will be
	 *	   inserted after this Basic token.
	 * </p>
	 * <p>
	 *     Ganache CLI option: {@code --fork.username}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>none</i>
	 * </p>
	 *
	 * @param username The username.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified username is blank.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#fork">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withForkUsername(final String username) {
		checkCompatibility(V7.getMajorVersion());
		if (StringUtils.isBlank(username)) {
			throw new IllegalArgumentException("The fork username cannot be blank.");
		}
		this.ganacheOptions.add("--fork.username ".concat(username));
		return self();
	}

	/**
	 * The password to use for Basic Authentication. It does not require setting {@link #withForkUsername(String)}.
	 * <p>
	 *     When combined with the option {@link #withForkUsername(String)}, it is shorthand for fork:
	 *	   <pre>
	 *		 { headers:
	 *		   { "Authorization": "Basic &lt;ENCODED-BASIC-HEADER&gt;" }
	 *		 }
	 *	   </pre>
	 *	   If the {@link #withForkHeaders(String[])} option specifies an {@code Authorization} header, it will be
	 *	   inserted after this Basic token.
	 * </p>
	 * <p>
	 *	   Ganache CLI option: {@code --fork.password}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>none</i>
	 * </p>
	 *
	 * @param password The password.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified password is blank.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#fork">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withForkPassword(final String password) {
		checkCompatibility(V7.getMajorVersion());
		if (StringUtils.isBlank(password)) {
			throw new IllegalArgumentException("The fork password cannot be blank.");
		}
		this.ganacheOptions.add("--fork.password ".concat(password));
		return self();
	}

	/**
	 * The encoded JSON web token to use for authenticating to some servers.
	 * <p>
	 *     It is shorthand for fork:
	 *	   <pre>
	 *		 { headers:
	 *		   { "Authorization": "Bearer &lt;ENCODED-JWT&gt;" }
	 *		 }
	 *	   </pre>
	 *	   If the {@link #withForkHeaders(String[])} option specifies an {@code Authorization} header, it will be
	 *	   inserted after this JWT bearer token.
	 * </p>
	 * <p>
	 *     Ganache CLI option: {@code --fork.jwt}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>none</i>
	 * </p>
	 *
	 * @param jwt The encoded JSON web token.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified JWT is blank or invalid.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#fork">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withForkJwt(final String jwt) {
		checkCompatibility(V7.getMajorVersion());
		if (StringUtils.isBlank(jwt)) {
			throw new IllegalArgumentException("The fork JWT cannot be blank.");
		}
		try {
			JWT.decode(jwt);
		} catch (final JWTDecodeException ex) {
			throw new IllegalArgumentException("The fork JWT is invalid.");
		}
		this.ganacheOptions.add("--fork.jwt ".concat(jwt));
		return self();
	}

	/**
	 * The {@code User-Agent} header sent to the fork on each request. It will be overridden by a {@code User-Agent}
	 * header defined in the {@link #withForkHeaders(String[])} option, if provided.
	 * <p>
	 *     Ganache CLI option: {@code --fork.userAgent}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>Ganache/7.x.x (https://www.trufflesuite.com/ganache;ganache&lt;at&gt;trufflesuite.com)</i>
	 * </p>
	 *
	 * @param userAgent The {@code User-Agent} header.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified user agent is blank.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#fork">
	 *	 Ganache CLI logging options</a>
	 */
	@SuppressWarnings("JavadocLinkAsPlainText")
	public SELF withForkUserAgent(final String userAgent) {
		checkCompatibility(V7.getMajorVersion());
		if (StringUtils.isBlank(userAgent)) {
			throw new IllegalArgumentException("The fork user agent cannot be blank.");
		}
		this.ganacheOptions.add("--fork.userAgent ".concat(userAgent));
		return self();
	}

	/**
	 * The {@code Origin} header sent to the fork on each request. It will be overridden by an {@code Origin} header
	 * defined in the {@link #withForkHeaders(String[])} option, if provided.
	 * <p>
	 *     Ganache CLI option: {@code --fork.origin}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>none</i>
	 * </p>
	 *
	 * @param origin The {@code Origin} header.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified origin is blank.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#fork">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withForkOrigin(final String origin) {
		checkCompatibility(V7.getMajorVersion());
		if (StringUtils.isBlank(origin)) {
			throw new IllegalArgumentException("The fork origin cannot be blank.");
		}
		this.ganacheOptions.add("--fork.origin ".concat(origin));
		return self();
	}

	/**
	 * The headers to supply on each request to the forked provider. The headers set here override the headers set by
	 * other options, unless otherwise specified.
	 * <p>
	 *     Ganache CLI option: {@code --fork.headers}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>contains the default {@code User-Agent} header</i>
	 * </p>
	 *
	 * @param headers The headers.
	 * @return a reference to this container instance.
	 * @throws IllegalArgumentException when the specified array of headers is {@code null} or contains at least an
	 * 									invalid header.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#fork">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withForkHeaders(final String[] headers) {
		checkCompatibility(V7.getMajorVersion());
		if (headers == null) {
			throw new IllegalArgumentException("The fork headers cannot be null.");
		}
		Arrays.stream(headers)
			.filter(header -> !header.matches(HTTP_HEADER_REGEX))
			.findAny().ifPresent(header -> {
				throw new IllegalArgumentException("At least one fork header is invalid: " + header);
			});
		this.ganacheOptions.add("--fork.headers ".concat(String.join(COMMA, headers)));
		return self();
	}

	/**
	 * The maximal number of requests per second sent to the fork provider. The value 0 means no limit is applied.
	 * <p>
	 *     Ganache CLI option: {@code --fork.requestsPerSecond}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>0</i>
	 * </p>
	 *
	 * @param numberOfRequests The maximal number of requests per second.
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#fork">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withForkRequestsPerSecond(final int numberOfRequests) {
		checkCompatibility(V7.getMajorVersion());
		this.ganacheOptions.add("--fork.requestsPerSecond ".concat(String.valueOf(numberOfRequests)));
		return self();
	}

	/**
	 * Whether the caching of all forking requests must be disabled.
	 * <p>
	 *     Ganache CLI option: {@code --forkCacheSize} (prior to v7) or {@code --fork.disableCache} (since v7)<br>
	 *	   Minimal required Ganache version: 6<br>
	 *	   Default value: <i>false; in the versions prior to v7 the cache size is 1073741824 bytes.</i>
	 * </p>
	 *
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#fork">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withForkCacheDisabled() {
		final GanacheOption forkCacheOptions = new GanacheOption()
				.addOption(V6, "--forkCacheSize 0")
				.addOption(V7, "--fork.disableCache");
		this.ganacheOptions.add(forkCacheOptions.getOptionNameForVersion(this.ganacheVersionLevel));
		return self();
	}

	/**
	 * Whether the persistent cache must be deleted before starting.
	 * <p>
	 *     Ganache CLI option: {@code --fork.deleteCache}<br>
	 *	   Minimal required Ganache version: 7<br>
	 *	   Default value: <i>false</i>
	 * </p>
	 *
	 * @return a reference to this container instance.
	 * @see <a href="https://trufflesuite.com/docs/ganache/reference/cli-options/#fork">
	 *	 Ganache CLI logging options</a>
	 */
	public SELF withForkCacheDeleted() {
		checkCompatibility(V7.getMajorVersion());
		this.ganacheOptions.add("--fork.deleteCache");
		return self();
	}
}
